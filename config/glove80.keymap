/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed by system behaviors/macros */
/* Include behaviour includes needed by key binds - automatically generated */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    /* Glove80 system behavior & macros */

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
        arkku_o_key: arkku_o_key {
            compatible = "zmk,behavior-mod-morph";
            label = "ARKKU_O_KEY";
            bindings = <&kp RA(A)>, <&kp RA(Q)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        arkku_a_key: arkku_a_key {
            compatible = "zmk,behavior-mod-morph";
            label = "ARKKU_A_KEY";
            bindings = <&kp RA(COMMA)>, <&kp RA(SEMICOLON)>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
    /* Automatically generated keymap */

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp ESCAPE         &kp F1    &kp F2   &kp F3    &kp F4                                                                                  &kp F5  &kp F6     &kp SLASH       &kp EQUAL        &kp BACKSPACE
&kp GRAVE          &kp N1    &kp N2   &kp N3    &kp N4  &kp N5                                                                  &kp N6  &kp N7  &kp N8     &kp N9          &kp N0           &kp LEFT_BRACKET
&kp TAB            &kp Q     &kp W    &kp E     &kp R   &kp T                                                                   &kp Y   &kp U   &kp I      &kp O           &kp P            &kp BSLH
&kp RIGHT_BRACKET  &kp A     &kp S    &kp D     &kp F   &kp G                                                                   &kp H   &kp J   &kp K      &kp L           &kp SEMI         &kp SQT
&kp GREATER_THAN   &kp Z     &kp X    &kp C     &kp V   &kp B   &kp LSHFT  &kp LCTRL  &lower    &kp LGUI  &kp RCTRL  &kp RSHFT  &kp N   &kp M   &kp COMMA  &kp DOT         &kp FSLH         &kp PG_UP
&magic 2 0         &kp HOME  &kp END  &kp LGUI  &none           &kp BSPC   &kp DEL    &kp LALT  &kp RALT  &kp RET    &kp SPACE          &kp UP  &kp DOWN   &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &none            &kp PAUSE_BREAK
&trans        &none         &none           &none           &none            &kp HOME                                                   &kp LEFT_PARENTHESIS   &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
&trans        &none         &none           &kp UP_ARROW    &none            &kp END                                                    &kp RIGHT_PARENTHESIS  &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
&trans        &none         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                  &kp PERCENT            &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp KP_PLUS      &none
&trans        &kp K_APP     &none           &kp F11         &kp F12          &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA              &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &trans
&magic 2 0    &kp CAPS      &kp INS         &kp F11         &kp F12                     &trans  &trans  &trans  &trans  &trans  &trans                         &kp KP_N0   &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&trans       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&reset       &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        dvorak {
            bindings = <
&kp ESC       &kp F1    &kp F2     &kp F3        &kp F4                                                                                                                    &kp F5        &kp F6          &kp LBKT        &kp RIGHT_BRACKET  &kp BSPC
&kp GRAVE     &kp N1    &kp N2     &kp N3        &kp N4  &kp N5                                                                                                    &kp N6  &kp N7        &kp N8          &kp N9          &kp N0             &kp FSLH
&kp TAB       &kp SQT   &kp COMMA  &kp DOT       &kp P   &kp Y                                                                                                     &kp F   &kp G         &kp C           &kp R           &kp L              &kp BSLH
&kp EQUAL     &kp A     &kp O      &kp E         &kp U   &kp I                                                                                                     &kp D   &kp H         &kp T           &kp N           &kp S              &kp MINUS
&arkku_o_key  &kp SEMI  &kp Q      &kp J         &kp K   &kp X   &kp LEFT_SHIFT  &kp LEFT_CONTROL  &lower        &kp LEFT_WIN   &kp LEFT_CONTROL  &kp RIGHT_SHIFT  &kp B   &kp M         &kp W           &kp V           &kp Z              &kp PAGE_UP
&magic 2 0    &kp HOME  &kp END    &kp LEFT_WIN  &none           &kp BACKSPACE   &kp DELETE        &kp LEFT_ALT  &kp RIGHT_ALT  &kp ENTER         &kp SPACE                &kp UP_ARROW  &kp DOWN_ARROW  &kp LEFT_ARROW  &kp RIGHT_ARROW    &kp PAGE_DOWN
            >;
        };
    };
};
